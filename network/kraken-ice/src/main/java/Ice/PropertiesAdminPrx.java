// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.1

package Ice;

// <auto-generated>
//
// Generated from file `Properties.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>


/**
 * The PropertiesAdmin interface provides remote access to the properties
 * of a communicator.
 * 
 **/
public interface PropertiesAdminPrx extends Ice.ObjectPrx
{
    /**
     * Get a property by key. If the property is not set, an empty
     * string is returned.
     * 
     * @param key The property key.
     * 
     * @return The property value.
     * 
     **/
    public String getProperty(String key);

    /**
     * Get a property by key. If the property is not set, an empty
     * string is returned.
     * 
     * @param key The property key.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The property value.
     * 
     **/
    public String getProperty(String key, java.util.Map<String, String> __ctx);

    /**
     * Get a property by key. If the property is not set, an empty
     * string is returned.
     * 
     * @param key The property key.
     * 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getProperty(String key);

    /**
     * Get a property by key. If the property is not set, an empty
     * string is returned.
     * 
     * @param key The property key.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getProperty(String key, java.util.Map<String, String> __ctx);

    /**
     * Get a property by key. If the property is not set, an empty
     * string is returned.
     * 
     * @param key The property key.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getProperty(String key, Ice.Callback __cb);

    /**
     * Get a property by key. If the property is not set, an empty
     * string is returned.
     * 
     * @param key The property key.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getProperty(String key, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Get a property by key. If the property is not set, an empty
     * string is returned.
     * 
     * @param key The property key.
     * 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getProperty(String key, Callback_PropertiesAdmin_getProperty __cb);

    /**
     * Get a property by key. If the property is not set, an empty
     * string is returned.
     * 
     * @param key The property key.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getProperty(String key, java.util.Map<String, String> __ctx, Callback_PropertiesAdmin_getProperty __cb);

    /**
     * Get a property by key. If the property is not set, an empty
     * string is returned.
     * 
     * @param __result The asynchronous result object.
     * @return The property value.
     * 
     **/
    public String end_getProperty(Ice.AsyncResult __result);

    /**
     * Get a property by key. If the property is not set, an empty
     * string is returned.
     * 
     * @param __cb The callback object for the operation.
     * @param key The property key.
     * 
     **/
    public boolean getProperty_async(AMI_PropertiesAdmin_getProperty __cb, String key);

    /**
     * Get a property by key. If the property is not set, an empty
     * string is returned.
     * 
     * @param __cb The callback object for the operation.
     * @param key The property key.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getProperty_async(AMI_PropertiesAdmin_getProperty __cb, String key, java.util.Map<String, String> __ctx);

    /**
     * Get all properties whose keys begins with
     * <em>prefix</em>. If
     * <em>prefix</em> is an empty string,
     * then all properties are returned.
     * 
     * @param prefix The prefix to search for (empty string if none).
     * @return The matching property set.
     * 
     **/
    public java.util.Map<java.lang.String, java.lang.String> getPropertiesForPrefix(String prefix);

    /**
     * Get all properties whose keys begins with
     * <em>prefix</em>. If
     * <em>prefix</em> is an empty string,
     * then all properties are returned.
     * 
     * @param prefix The prefix to search for (empty string if none).
     * @param __ctx The Context map to send with the invocation.
     * @return The matching property set.
     * 
     **/
    public java.util.Map<java.lang.String, java.lang.String> getPropertiesForPrefix(String prefix, java.util.Map<String, String> __ctx);

    /**
     * Get all properties whose keys begins with
     * <em>prefix</em>. If
     * <em>prefix</em> is an empty string,
     * then all properties are returned.
     * 
     * @param prefix The prefix to search for (empty string if none).
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getPropertiesForPrefix(String prefix);

    /**
     * Get all properties whose keys begins with
     * <em>prefix</em>. If
     * <em>prefix</em> is an empty string,
     * then all properties are returned.
     * 
     * @param prefix The prefix to search for (empty string if none).
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getPropertiesForPrefix(String prefix, java.util.Map<String, String> __ctx);

    /**
     * Get all properties whose keys begins with
     * <em>prefix</em>. If
     * <em>prefix</em> is an empty string,
     * then all properties are returned.
     * 
     * @param prefix The prefix to search for (empty string if none).
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getPropertiesForPrefix(String prefix, Ice.Callback __cb);

    /**
     * Get all properties whose keys begins with
     * <em>prefix</em>. If
     * <em>prefix</em> is an empty string,
     * then all properties are returned.
     * 
     * @param prefix The prefix to search for (empty string if none).
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getPropertiesForPrefix(String prefix, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * Get all properties whose keys begins with
     * <em>prefix</em>. If
     * <em>prefix</em> is an empty string,
     * then all properties are returned.
     * 
     * @param prefix The prefix to search for (empty string if none).
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getPropertiesForPrefix(String prefix, Callback_PropertiesAdmin_getPropertiesForPrefix __cb);

    /**
     * Get all properties whose keys begins with
     * <em>prefix</em>. If
     * <em>prefix</em> is an empty string,
     * then all properties are returned.
     * 
     * @param prefix The prefix to search for (empty string if none).
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getPropertiesForPrefix(String prefix, java.util.Map<String, String> __ctx, Callback_PropertiesAdmin_getPropertiesForPrefix __cb);

    /**
     * Get all properties whose keys begins with
     * <em>prefix</em>. If
     * <em>prefix</em> is an empty string,
     * then all properties are returned.
     * 
     * @param __result The asynchronous result object.
     * @return The matching property set.
     * 
     **/
    public java.util.Map<java.lang.String, java.lang.String> end_getPropertiesForPrefix(Ice.AsyncResult __result);

    /**
     * Get all properties whose keys begins with
     * <em>prefix</em>. If
     * <em>prefix</em> is an empty string,
     * then all properties are returned.
     * 
     * @param __cb The callback object for the operation.
     * @param prefix The prefix to search for (empty string if none).
     **/
    public boolean getPropertiesForPrefix_async(AMI_PropertiesAdmin_getPropertiesForPrefix __cb, String prefix);

    /**
     * Get all properties whose keys begins with
     * <em>prefix</em>. If
     * <em>prefix</em> is an empty string,
     * then all properties are returned.
     * 
     * @param __cb The callback object for the operation.
     * @param prefix The prefix to search for (empty string if none).
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean getPropertiesForPrefix_async(AMI_PropertiesAdmin_getPropertiesForPrefix __cb, String prefix, java.util.Map<String, String> __ctx);
}
