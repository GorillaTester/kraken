package org.krakenapps.rpc.impl;

import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import org.krakenapps.rpc.RpcBlockingTable;
import org.krakenapps.rpc.RpcMessage;
import org.krakenapps.rpc.RpcWaitingCall;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Each connection has RPC blocking table, because id scope of RPC message is
 * bound by RPC connection. New message id is generated by connection, and
 * blocking table use message id as waiting identifier.
 * 
 * @author xeraph
 * 
 */
public class RpcBlockingTableImpl implements RpcBlockingTable {
	private final Logger logger = LoggerFactory.getLogger(RpcBlockingTableImpl.class.getName());
	private Map<Integer, RpcWaitingCall> lockMap;
	private RpcMessage interruptSignal = RpcMessage.newException(-1, 0, 0, null);

	public RpcBlockingTableImpl() {
		lockMap = new ConcurrentHashMap<Integer, RpcWaitingCall>();
	}

	@Override
	public Collection<RpcWaitingCall> getWaitingCalls() {
		return Collections.unmodifiableCollection(lockMap.values());
	}

	@Override
	public void cancel(int id) {
		if (logger.isDebugEnabled())
			logger.debug("kraken-rpc: interrupt waiting call {}", id);

		RpcWaitingCallImpl item = (RpcWaitingCallImpl) lockMap.get(id);
		if (item == null)
			return;

		synchronized (item) {
			item.result = interruptSignal;
			item.notifyAll();
		}
	}

	/**
	 * Wakes up waiting threads
	 * 
	 * @param id
	 *            the message id
	 * @param response
	 *            the response message
	 */
	public void signal(int id, RpcMessage response) {
		if (logger.isDebugEnabled())
			logger.debug("kraken-rpc: signal call response {}", id);

		RpcWaitingCallImpl item = (RpcWaitingCallImpl) lockMap.get(id);
		if (item == null) {
			logger.warn("kraken-rpc: no waiting item {}, maybe timeout", id);
			return;
		}

		synchronized (item) {
			item.result = response;
			item.notifyAll();
		}
	}

	/**
	 * Blocks and waits response until response returns. It may not terminate
	 * because it waits infinitely without any timeout. In that case, you should
	 * interrupt waiting thread manually using rpc shell command.
	 * 
	 * @param id
	 *            the rpc message id
	 * @return the rpc response of call
	 * @throws InterruptedException
	 */
	public RpcMessage await(int id) throws InterruptedException {
		if (logger.isDebugEnabled())
			logger.debug("kraken-rpc: waiting call response id {}", id);

		RpcWaitingCallImpl item = new RpcWaitingCallImpl(id);
		lockMap.put(id, item);

		try {
			synchronized (item) {
				while (item.result == null)
					item.wait();
			}

			if (item.result == interruptSignal)
				throw new InterruptedException("call cancelled");

		} finally {
			if (logger.isDebugEnabled())
				logger.debug("kraken-rpc: removing blocking lock id {}", id);

			lockMap.remove(id);
		}

		return item.result;
	}

	public RpcMessage await(int id, long timeout) throws InterruptedException {
		RpcWaitingCallImpl item = new RpcWaitingCallImpl(id);
		lockMap.put(id, item);
		long before = new Date().getTime();

		try {
			synchronized (item) {
				while (item.result == null) {
					item.wait(timeout);

					if (new Date().getTime() - before >= timeout) {
						if (logger.isDebugEnabled())
							logger.debug("kraken-rpc: blocking timeout of id {}", id);
						break;
					}
				}
			}

			if (item.result == interruptSignal)
				throw new InterruptedException("call cancelled");
		} finally {
			if (logger.isDebugEnabled())
				logger.debug("kraken-rpc: blocking finished for id {}", id);

			lockMap.remove(id);
		}

		return item.result;
	}

	private static class RpcWaitingCallImpl implements RpcWaitingCall {
		private int id;
		private Date since;
		private RpcMessage result = null;

		public RpcWaitingCallImpl(int id) {
			this.id = id;
			this.since = new Date();
		}

		@Override
		public int getId() {
			return id;
		}

		@Override
		public Date getSince() {
			return since;
		}

		@Override
		public String toString() {
			return String.format("id=%s, since=%s", id, since.toString());
		}
	}
}
