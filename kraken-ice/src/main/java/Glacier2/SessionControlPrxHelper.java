// **********************************************************************
//
// Copyright (c) 2003-2010 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************

// Ice version 3.4.1

package Glacier2;

// <auto-generated>
//
// Generated from file `Session.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>


/**
 * An administrative session control object, which is tied to the
 * lifecycle of a {@link Session}.
 * 
 * @see Session
 * 
 **/
public final class SessionControlPrxHelper extends Ice.ObjectPrxHelperBase implements SessionControlPrx
{
    /**
     * Access the object that manages the allowable adapter identities
     * for objects for this session. 
     * 
     * @return A StringSet object.
     * 
     **/
    public StringSetPrx
    adapterIds()
    {
        return adapterIds(null, false);
    }

    /**
     * Access the object that manages the allowable adapter identities
     * for objects for this session. 
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return A StringSet object.
     * 
     **/
    public StringSetPrx
    adapterIds(java.util.Map<String, String> __ctx)
    {
        return adapterIds(__ctx, true);
    }

    private StringSetPrx
    adapterIds(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("adapterIds");
                __delBase = __getDelegate(false);
                _SessionControlDel __del = (_SessionControlDel)__delBase;
                return __del.adapterIds(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __adapterIds_name = "adapterIds";

    /**
     * Access the object that manages the allowable adapter identities
     * for objects for this session. 
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_adapterIds()
    {
        return begin_adapterIds(null, false, null);
    }

    /**
     * Access the object that manages the allowable adapter identities
     * for objects for this session. 
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_adapterIds(java.util.Map<String, String> __ctx)
    {
        return begin_adapterIds(__ctx, true, null);
    }

    /**
     * Access the object that manages the allowable adapter identities
     * for objects for this session. 
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_adapterIds(Ice.Callback __cb)
    {
        return begin_adapterIds(null, false, __cb);
    }

    /**
     * Access the object that manages the allowable adapter identities
     * for objects for this session. 
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_adapterIds(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_adapterIds(__ctx, true, __cb);
    }

    /**
     * Access the object that manages the allowable adapter identities
     * for objects for this session. 
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_adapterIds(Callback_SessionControl_adapterIds __cb)
    {
        return begin_adapterIds(null, false, __cb);
    }

    /**
     * Access the object that manages the allowable adapter identities
     * for objects for this session. 
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_adapterIds(java.util.Map<String, String> __ctx, Callback_SessionControl_adapterIds __cb)
    {
        return begin_adapterIds(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_adapterIds(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__adapterIds_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __adapterIds_name, __cb);
        try
        {
            __result.__prepare(__adapterIds_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) A StringSet object.
     * 
     **/
    public StringSetPrx end_adapterIds(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __adapterIds_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        StringSetPrx __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = StringSetPrxHelper.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * Access the object that manages the allowable categories
     * for object identities for this session. 
     * 
     * @return A StringSet object.
     * 
     **/
    public StringSetPrx
    categories()
    {
        return categories(null, false);
    }

    /**
     * Access the object that manages the allowable categories
     * for object identities for this session. 
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return A StringSet object.
     * 
     **/
    public StringSetPrx
    categories(java.util.Map<String, String> __ctx)
    {
        return categories(__ctx, true);
    }

    private StringSetPrx
    categories(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("categories");
                __delBase = __getDelegate(false);
                _SessionControlDel __del = (_SessionControlDel)__delBase;
                return __del.categories(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __categories_name = "categories";

    /**
     * Access the object that manages the allowable categories
     * for object identities for this session. 
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_categories()
    {
        return begin_categories(null, false, null);
    }

    /**
     * Access the object that manages the allowable categories
     * for object identities for this session. 
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_categories(java.util.Map<String, String> __ctx)
    {
        return begin_categories(__ctx, true, null);
    }

    /**
     * Access the object that manages the allowable categories
     * for object identities for this session. 
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_categories(Ice.Callback __cb)
    {
        return begin_categories(null, false, __cb);
    }

    /**
     * Access the object that manages the allowable categories
     * for object identities for this session. 
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_categories(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_categories(__ctx, true, __cb);
    }

    /**
     * Access the object that manages the allowable categories
     * for object identities for this session. 
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_categories(Callback_SessionControl_categories __cb)
    {
        return begin_categories(null, false, __cb);
    }

    /**
     * Access the object that manages the allowable categories
     * for object identities for this session. 
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_categories(java.util.Map<String, String> __ctx, Callback_SessionControl_categories __cb)
    {
        return begin_categories(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_categories(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__categories_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __categories_name, __cb);
        try
        {
            __result.__prepare(__categories_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) A StringSet object.
     * 
     **/
    public StringSetPrx end_categories(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __categories_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        StringSetPrx __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = StringSetPrxHelper.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * Destroy the associated session.
     * 
     **/
    public void
    destroy()
    {
        destroy(null, false);
    }

    /**
     * Destroy the associated session.
     * 
     * @param __ctx The Context map to send with the invocation.
     **/
    public void
    destroy(java.util.Map<String, String> __ctx)
    {
        destroy(__ctx, true);
    }

    private void
    destroy(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __delBase = __getDelegate(false);
                _SessionControlDel __del = (_SessionControlDel)__delBase;
                __del.destroy(__ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __destroy_name = "destroy";

    /**
     * Destroy the associated session.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_destroy()
    {
        return begin_destroy(null, false, null);
    }

    /**
     * Destroy the associated session.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx)
    {
        return begin_destroy(__ctx, true, null);
    }

    /**
     * Destroy the associated session.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_destroy(Ice.Callback __cb)
    {
        return begin_destroy(null, false, __cb);
    }

    /**
     * Destroy the associated session.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_destroy(__ctx, true, __cb);
    }

    /**
     * Destroy the associated session.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_destroy(Callback_SessionControl_destroy __cb)
    {
        return begin_destroy(null, false, __cb);
    }

    /**
     * Destroy the associated session.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, Callback_SessionControl_destroy __cb)
    {
        return begin_destroy(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_destroy(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __destroy_name, __cb);
        try
        {
            __result.__prepare(__destroy_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_destroy(Ice.AsyncResult __result)
    {
        __end(__result, __destroy_name);
    }

    /**
     * Destroy the associated session.
     * 
     * @param __cb The callback object for the operation.
     **/
    public boolean
    destroy_async(AMI_SessionControl_destroy __cb)
    {
        Ice.AsyncResult __r = begin_destroy(null, false, __cb);
        return __r.sentSynchronously();
    }

    /**
     * Destroy the associated session.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public boolean
    destroy_async(AMI_SessionControl_destroy __cb, java.util.Map<String, String> __ctx)
    {
        Ice.AsyncResult __r = begin_destroy(__ctx, true, __cb);
        return __r.sentSynchronously();
    }

    /**
     * Get the session timeout.
     * 
     * @return The timeout.
     * 
     **/
    public int
    getSessionTimeout()
    {
        return getSessionTimeout(null, false);
    }

    /**
     * Get the session timeout.
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return The timeout.
     * 
     **/
    public int
    getSessionTimeout(java.util.Map<String, String> __ctx)
    {
        return getSessionTimeout(__ctx, true);
    }

    private int
    getSessionTimeout(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getSessionTimeout");
                __delBase = __getDelegate(false);
                _SessionControlDel __del = (_SessionControlDel)__delBase;
                return __del.getSessionTimeout(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __cnt = __handleExceptionWrapperRelaxed(__delBase, __ex, null, __cnt);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getSessionTimeout_name = "getSessionTimeout";

    /**
     * Get the session timeout.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getSessionTimeout()
    {
        return begin_getSessionTimeout(null, false, null);
    }

    /**
     * Get the session timeout.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getSessionTimeout(java.util.Map<String, String> __ctx)
    {
        return begin_getSessionTimeout(__ctx, true, null);
    }

    /**
     * Get the session timeout.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getSessionTimeout(Ice.Callback __cb)
    {
        return begin_getSessionTimeout(null, false, __cb);
    }

    /**
     * Get the session timeout.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getSessionTimeout(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getSessionTimeout(__ctx, true, __cb);
    }

    /**
     * Get the session timeout.
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getSessionTimeout(Callback_SessionControl_getSessionTimeout __cb)
    {
        return begin_getSessionTimeout(null, false, __cb);
    }

    /**
     * Get the session timeout.
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getSessionTimeout(java.util.Map<String, String> __ctx, Callback_SessionControl_getSessionTimeout __cb)
    {
        return begin_getSessionTimeout(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getSessionTimeout(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getSessionTimeout_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getSessionTimeout_name, __cb);
        try
        {
            __result.__prepare(__getSessionTimeout_name, Ice.OperationMode.Idempotent, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) The timeout.
     * 
     **/
    public int end_getSessionTimeout(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getSessionTimeout_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        int __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readInt();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * Access the object that manages the allowable object identities
     * for this session. 
     * 
     * @return An IdentitySet object.
     * 
     **/
    public IdentitySetPrx
    identities()
    {
        return identities(null, false);
    }

    /**
     * Access the object that manages the allowable object identities
     * for this session. 
     * 
     * @param __ctx The Context map to send with the invocation.
     * @return An IdentitySet object.
     * 
     **/
    public IdentitySetPrx
    identities(java.util.Map<String, String> __ctx)
    {
        return identities(__ctx, true);
    }

    private IdentitySetPrx
    identities(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("identities");
                __delBase = __getDelegate(false);
                _SessionControlDel __del = (_SessionControlDel)__delBase;
                return __del.identities(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __identities_name = "identities";

    /**
     * Access the object that manages the allowable object identities
     * for this session. 
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_identities()
    {
        return begin_identities(null, false, null);
    }

    /**
     * Access the object that manages the allowable object identities
     * for this session. 
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_identities(java.util.Map<String, String> __ctx)
    {
        return begin_identities(__ctx, true, null);
    }

    /**
     * Access the object that manages the allowable object identities
     * for this session. 
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_identities(Ice.Callback __cb)
    {
        return begin_identities(null, false, __cb);
    }

    /**
     * Access the object that manages the allowable object identities
     * for this session. 
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_identities(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_identities(__ctx, true, __cb);
    }

    /**
     * Access the object that manages the allowable object identities
     * for this session. 
     * 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_identities(Callback_SessionControl_identities __cb)
    {
        return begin_identities(null, false, __cb);
    }

    /**
     * Access the object that manages the allowable object identities
     * for this session. 
     * 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_identities(java.util.Map<String, String> __ctx, Callback_SessionControl_identities __cb)
    {
        return begin_identities(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_identities(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__identities_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __identities_name, __cb);
        try
        {
            __result.__prepare(__identities_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     * @param __ret (return value) An IdentitySet object.
     * 
     **/
    public IdentitySetPrx end_identities(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __identities_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name());
            }
        }
        IdentitySetPrx __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = IdentitySetPrxHelper.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    public static SessionControlPrx
    checkedCast(Ice.ObjectPrx __obj)
    {
        SessionControlPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (SessionControlPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA("::Glacier2::SessionControl"))
                {
                    SessionControlPrxHelper __h = new SessionControlPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static SessionControlPrx
    checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        SessionControlPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (SessionControlPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA("::Glacier2::SessionControl", __ctx))
                {
                    SessionControlPrxHelper __h = new SessionControlPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static SessionControlPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        SessionControlPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA("::Glacier2::SessionControl"))
                {
                    SessionControlPrxHelper __h = new SessionControlPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static SessionControlPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        SessionControlPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA("::Glacier2::SessionControl", __ctx))
                {
                    SessionControlPrxHelper __h = new SessionControlPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static SessionControlPrx
    uncheckedCast(Ice.ObjectPrx __obj)
    {
        SessionControlPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (SessionControlPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                SessionControlPrxHelper __h = new SessionControlPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static SessionControlPrx
    uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        SessionControlPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            SessionControlPrxHelper __h = new SessionControlPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    protected Ice._ObjectDelM
    __createDelegateM()
    {
        return new _SessionControlDelM();
    }

    protected Ice._ObjectDelD
    __createDelegateD()
    {
        return new _SessionControlDelD();
    }

    public static void
    __write(IceInternal.BasicStream __os, SessionControlPrx v)
    {
        __os.writeProxy(v);
    }

    public static SessionControlPrx
    __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            SessionControlPrxHelper result = new SessionControlPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }
}
